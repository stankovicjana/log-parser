; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: pushd c:\Users\stank\OneDrive\Radna površina\lein project & cmd.exe /d /c lein update-in :dependencies conj [nrepl,"1.1.1"] -- update-in :plugins conj [cider/cider-nrepl,"0.47.1"] -- update-in [:repl-options,:nrepl-middleware] conj '["cider.nrepl/cider-middleware"]' -- repl :headless & popd
; Using host:port 127.0.0.1:52035 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///c%3A/Users/stank/OneDrive/Radna%20povr%C5%A1ina/lein%20project/.nrepl-port ...
; Using host:port localhost:52069 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉user꞉> 
#'user/now
clj꞉user꞉> 
#'user/now
clj꞉user꞉> 
{:era #object[java.time.chrono.IsoEra 0x5b14604e "CE"], :monthValue 11, :leapYear true, :month #object[java.time.Month 0x7451aa60 "NOVEMBER"], :dayOfMonth 4, :year 2024, :chronology #object[java.time.chrono.IsoChronology 0x5e54700f "ISO"], :class java.time.LocalDate, :dayOfWeek #object[java.time.DayOfWeek 0x3a5f004b "MONDAY"], :dayOfYear 309}
clj꞉user꞉> 
; Execution error (IllegalArgumentException) at user/eval2409 (form-init1649674722608153245.clj:45).
; Don't know how to create ISeq from: java.time.LocalDate
clj꞉user꞉> 
{:era #object[java.time.chrono.IsoEra 0x5b14604e "CE"], :monthValue 11, :leapYear true, :month #object[java.time.Month 0x7451aa60 "NOVEMBER"], :dayOfMonth 4, :year 2024, :chronology #object[java.time.chrono.IsoChronology 0x5e54700f "ISO"], :class java.time.LocalDate, :dayOfWeek #object[java.time.DayOfWeek 0x3a5f004b "MONDAY"], :dayOfYear 309}
clj꞉user꞉> 
; Execution error (IllegalArgumentException) at user/eval2413 (form-init1649674722608153245.clj:45).
; Don't know how to create ISeq from: java.time.LocalDate
clj꞉user꞉> 
#'user/now
clj꞉user꞉> 
; Syntax error compiling at (c:\Users\stank\OneDrive\Radna površina\lein project\ex.clj:41:1).
; Unable to resolve symbol: prirodni-skup in this context
clj꞉user꞉> 
; #object[clojure.lang.Var$Unbound 0x616e54ba Unbound: #'user/prirodni-skup]
; Syntax error compiling at (c:\Users\stank\OneDrive\Radna površina\lein project\ex.clj:40:20).
; Unable to resolve symbol: prirodni-brojevi in this context
clj꞉user꞉> 
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///c%3A/Users/stank/OneDrive/Radna%20povr%C5%A1ina/lein%20project/.nrepl-port ...
; Using host:port localhost:52174 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉user꞉> 
; Syntax error compiling at (c:\Users\stank\OneDrive\Radna površina\lein project\ex.clj:47:1).
; Unable to resolve symbol: now in this context
clj꞉user꞉> 
; Execution error (IllegalArgumentException) at user/eval2400 (form-init5433808797896023253.clj:46).
; Don't know how to create ISeq from: java.time.LocalDate
clj꞉user꞉> 
{:era #object[java.time.chrono.IsoEra 0x76054aa9 "CE"], :monthValue 11, :leapYear true, :month #object[java.time.Month 0x38276634 "NOVEMBER"], :dayOfMonth 4, :year 2024, :chronology #object[java.time.chrono.IsoChronology 0x569edc4 "ISO"], :class java.time.LocalDate, :dayOfWeek #object[java.time.DayOfWeek 0x57ce9756 "MONDAY"], :dayOfYear 309}
clj꞉user꞉> 
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///d%3A/FON/MASTER/log-parser/.nrepl-port ...
; Using host:port localhost:62982 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉user꞉> 
; Syntax error compiling at (d:\FON\MASTER\log-parser\test\sample\tests.clj:5:1).
; Unable to resolve symbol: fact in this context
clj꞉user꞉> 
; Syntax error macroexpanding clojure.core/ns at (d:\FON\MASTER\log-parser\test\sample\tests.clj:1:1).
; :test - failed: simple-symbol? at: [:ns-name] spec: :clojure.core.specs.alpha/ns-form
; 
; Syntax error compiling at (d:\FON\MASTER\log-parser\test\sample\tests.clj:5:1).
; Unable to resolve symbol: fact in this context
clj꞉user꞉> 
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///d%3A/FON/MASTER/log-parser/.nrepl-port ...
; Using host:port localhost:63003 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
; Syntax error compiling at (d:\FON\MASTER\log-parser\test\sample\tests.clj:5:1).
; Unable to resolve symbol: fact in this context
clj꞉user꞉> 

; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///d%3A/FON/MASTER/log-parser/.nrepl-port ...
; Using host:port localhost:63046 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
; Syntax error (ClassNotFoundException) compiling at (d:\FON\MASTER\log-parser\test\sample\tests.clj:1:1466).
; idje.sweet
; 
; Syntax error reading source at (REPL:2:38).
; Unmatched delimiter: ]
clj꞉user꞉> 
; Syntax error macroexpanding clojure.core/ns at (d:\FON\MASTER\log-parser\test\sample\tests.clj:1:1).
; :test - failed: simple-symbol? at: [:ns-name] spec: :clojure.core.specs.alpha/ns-form
; 
; Syntax error compiling at (d:\FON\MASTER\log-parser\test\sample\tests.clj:4:1).
; Unable to resolve symbol: fact in this context
clj꞉user꞉> 
true
clj꞉sample.test꞉> 
true
clj꞉sample.test꞉> 
true
clj꞉sample.test꞉> 
true
clj꞉sample.test꞉> 
true
clj꞉sample.test꞉> 
true
clj꞉sample.test꞉> 
true
clj꞉sample.test꞉> 
